// the vcd(vehicle counting device) controller sends the available space data through rs485tottl to arduinop10 display. vcd sends this data AA 01 80 A0 available 55. the arduino extract the data and sends it to the p10 display
#include <DMD3.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <TimerOne.h>
#include <font/TimesNewRoman12.h>

const int ledPin = 13;
DMD3 display;

const byte TX_PIN = 2;
const byte RX_PIN = 3;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

byte const run1[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run2[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000001,
  B00000000, B0000001,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run3[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run4[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run5[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
};


byte const run6[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run7[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000001,
  B00000000, B00000000,
};

byte const run8[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000011,
  B00000000, B00000001,
};


byte const run9[] PROGMEM = {
  16, 13,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000000, B11111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00000111,
  B00000000, B00000011,
};


byte const run10[] PROGMEM = {
  16, 13,
  B00000000, B00000100,
  B00000000, B00001100,
  B00000000, B00011100,
  B00000000, B00111100,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000001, B11111111,
  B00000000, B11111100,
  B00000000, B01111100,
  B00000000, B00111100,
  B00000000, B00011100,
  B00000000, B00001100,
};

byte const run11[] PROGMEM = {
  16, 13,
  B00000000, B00001000,
  B00000000, B00011000,
  B00000000, B00111000,
  B00000000, B01111000,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000011, B11111111,
  B00000001, B11111000,
  B00000000, B11111000,
  B00000000, B01111000,
  B00000000, B00111000,
  B00000000, B00011000,
};

byte const run12[] PROGMEM = {
  16, 13,
  B00000000, B00010000,
  B00000000, B00110000,
  B00000000, B01110000,
  B00000000, B11110000,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000111, B11111111,
  B00000111, B11111111,
  B00000011, B11110000,
  B00000001, B11110000,
  B00000000, B11110000,
  B00000000, B01110000,
  B00000000, B00110000,
};

byte const run13[] PROGMEM = {
  16, 13,
  B00000000, B00100000,
  B00000000, B01100000,
  B00000000, B11100000,
  B00000001, B11100000,
  B00000011, B11111111,
  B00000111, B11111111,
  B00001111, B11111111,
  B00001111, B11111111,
  B00000111, B11100000,
  B00000011, B11100000,
  B00000001, B11100000,
  B00000000, B11100000,
  B00000000, B01100000,
};

byte const run14[] PROGMEM = {
  16, 13,
  B00000000, B01000000,
  B00000000, B11000000,
  B00000001, B11000000,
  B00000011, B11000000,
  B00000111, B11111111,
  B00001111, B11111111,
  B00011111, B11111111,
  B00011111, B11111111,
  B00001111, B11000000,
  B00000111, B11000000,
  B00000011, B11000000,
  B00000001, B11000000,
  B00000000, B11000000,
};

byte const run15[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000001, B10000000,
  B00000011, B10000000,
  B00000111, B10000000,
  B00001111, B11111111,
  B00011111, B11111111,
  B00111111, B11111111,
  B00111111, B11111111,
  B00011111, B10000000,
  B00001111, B10000000,
  B00000111, B10000000,
  B00000011, B10000000,
  B00000001, B10000000,
};

byte const run16[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};
Bitmap::ProgMem frames[] = {
    run1,
    run2,
    run3,
    run4,
    run5,
    run6,
    run7,
    run8,
    run9,
    run10,
    run11,
    run12,
    run13,
    run14,
    run15,
    run16,
};

#define NUM_FRAMES (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;

#define ADVANCE_MS (1000 / NUM_FRAMES)

unsigned long lastFrameChange = 0;
int currentVacancy = -1; // Keep track of the current vacancy value

void scan() {
    display.refresh();
}

void setup() {
    Serial.begin(9600);
    Serial.println("Start...");
    Soft_Serial.begin(9600);
    Timer1.initialize(2000);
    Timer1.attachInterrupt(scan);
    Timer1.pwm(9, 255);
}

void loop() {
    unsigned long currentMillis = millis();

    // Continuously display the arrow
    if (currentMillis - lastFrameChange >= ADVANCE_MS) {
        show_arrow(frames[frame]);
        frame = (frame + 1) % NUM_FRAMES;
        lastFrameChange = currentMillis;
    }

    // Check for serial data
    if (Soft_Serial.available() > 0) {
        Serial.println("Data available.");
        process_serial_data();
    }
}

void process_serial_data() {
    char buffer[6];
    int bytesRead = Soft_Serial.readBytes(buffer, sizeof(buffer));

    Serial.print("Bytes read: ");
    Serial.println(bytesRead);

    if (bytesRead == 6) {
        Serial.print("Received data: ");
        for (int i = 0; i < bytesRead; i++) {
            Serial.print((unsigned char)buffer[i], HEX);
            Serial.print(" ");
        }
        Serial.println();

        if ((unsigned char)buffer[0] == 0xAA && (unsigned char)buffer[1] == 0x01 && 
            (unsigned char)buffer[2] == 0x80 && (unsigned char)buffer[3] == 0xA0 && 
            (unsigned char)buffer[5] == 0x55) {
            
            int vacancy = (unsigned char)buffer[4];

            Serial.print("Vacancy: ");
            Serial.println(vacancy, HEX);

            // Update vacancy display if changed and if vacancy is non-negative
            if (vacancy >= 0 && vacancy != currentVacancy) {
                currentVacancy = vacancy;
                show_text(vacancy);
            }
        } else {
            Serial.println("Invalid data format.");
        }
    } else {
        Serial.println("Invalid data length.");
    }
}

void show_text(int vacancy) {
    // Clear the entire display before updating
    display.clear();
    display.setFont(TimesNewRoman12); // Use a smaller font

    char vacancyText[4];
    sprintf(vacancyText, "%d", vacancy);

    int x = (display.width() - display.textWidth(vacancyText)) / 2; // Center the text horizontally
    display.drawText(x - 6, 0, vacancyText); // Adjust the position for text
    display.refresh(); // Refresh the display after drawing text
}

void show_arrow(const byte* arrow) {
    // Clear the specific area for the arrow
    int x = (display.width() - 32) / 2; // Center the bitmap horizontally
    display.drawBitmap(x + 22, 2, arrow);
    display.refresh();
}
//Note- it works for the two digits number and the arrow sign. but suppose that i want to display the arrow sign and the display the 3 digit number then suppose i have 4 slots so in each slot i will print the number and the arrow
/*
void show_text(int vacancy) {
    // Clear the entire display before updating
    display.clear();
    display.setFont(TimesNewRoman12); // Use a smaller font

    char vacancyText[4];
    sprintf(vacancyText, "%d", vacancy);

    int x = (display.width() - display.textWidth(vacancyText)) / 2; // Center the text horizontally
    display.drawText(x - 3, 0, vacancyText); // Adjust the position for text
    display.refresh(); // Refresh the display after drawing text
}

void show_arrow(const byte* arrow) {
    // Clear the specific area for the arrow
    int x = (display.width() - 32) / 2; // Center the bitmap horizontally
    display.drawBitmap(x + 24, 2, arrow);
    display.refresh();
}
*/
