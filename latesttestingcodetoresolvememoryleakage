#this is the arduino library code same like i have used in esp32 micropython
#include <Arduino.h>
#include <Preferences.h>
#include <HardwareSerial.h>

// Configuration
const int entryLoopPin = 5;  // Entry loop detector pin
const int exitLoopPin = 4;   // Exit loop detector pin
const unsigned long debounceDelay = 50;  // Debounce delay in milliseconds

Preferences preferences;
HardwareSerial uart(2);  // UART2: TX=16, RX=17
HardwareSerial uart2(1); // UART1: TX=33, RX=32

int totalSlots = 99;
int vacantSlots;
int totalEntry;
int totalExit;

unsigned long lastEntryTime = 0;
unsigned long lastExitTime = 0;

// Function to send available slots to the display
void sendAvailableSlots(int slots) {
  char slots_str[3];
  sprintf(slots_str, "%02d", slots);
  String message = "|C|1|4|1|28-0-#u" + String(slots_str) + "|";
  Serial.println("Sending message: " + message);  // Debug print
  uart.write(message.c_str());
}

void sendNewUARTData(int totalSlots, int vacantSlots, int totalEntry, int totalExit) {
  uint8_t data_array[] = {0xAA, (uint8_t)totalSlots, (uint8_t)vacantSlots, (uint8_t)totalEntry, (uint8_t)totalExit, 0xCC};
  uart2.write(data_array, sizeof(data_array));
  Serial.print("New UART Data Sent: ");
  for (int i = 0; i < sizeof(data_array); i++) {
    Serial.print(data_array[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
}

void printAvailableSlots() {
  Serial.println("Available Parking Slots: " + String(vacantSlots));
}

void printTotalSlots() {
  Serial.println("Total Parking Slots: " + String(totalSlots));
}

void setup() {
  Serial.begin(115200);
  
  // Initialize Preferences
  preferences.begin("storage", false);

  // Retrieve or initialize Preferences variables
  totalSlots = preferences.getInt("totalSlots", 99);
  Serial.println("Total Parking Slots retrieved from Preferences: " + String(totalSlots));

  vacantSlots = preferences.getInt("vacantSlots", totalSlots);
  Serial.println("Vacant Parking Slots retrieved from Preferences: " + String(vacantSlots));

  totalEntry = preferences.getInt("totalEntry", 0);
  Serial.println("Total Entry retrieved from Preferences: " + String(totalEntry));

  totalExit = preferences.getInt("totalExit", 0);
  Serial.println("Total Exit retrieved from Preferences: " + String(totalExit));

  // Set up entry and exit loop detectors
  pinMode(entryLoopPin, INPUT_PULLUP);
  pinMode(exitLoopPin, INPUT_PULLUP);

  // Initialize UARTs
  uart.begin(9600, SERIAL_8N1, 17, 16);
  uart2.begin(9600, SERIAL_8N1, 32, 33);

  // Print initial available slots
  printAvailableSlots();
  printTotalSlots();
  sendAvailableSlots(vacantSlots);
}

void loop() {
  unsigned long currentTime = millis();
  
  int entryReading = digitalRead(entryLoopPin);
  int exitReading = digitalRead(exitLoopPin);
  
  // Handle entry detection
  if (entryReading == LOW && (currentTime - lastEntryTime >= debounceDelay)) {
    delay(50);
    if (digitalRead(entryLoopPin) == LOW) {
      lastEntryTime = currentTime;
      if (vacantSlots > 0) {
        vacantSlots--;
        totalEntry++;
        printAvailableSlots();
        sendAvailableSlots(vacantSlots);
        sendNewUARTData(totalSlots, vacantSlots, totalEntry, totalExit);
        preferences.putInt("vacantSlots", vacantSlots);
        preferences.putInt("totalEntry", totalEntry);
        delay(1000);
      }
    }
  }

  // Handle exit detection
  if (exitReading == LOW && (currentTime - lastExitTime >= debounceDelay)) {
    delay(50);
    if (digitalRead(exitLoopPin) == LOW) {
      lastExitTime = currentTime;
      if (vacantSlots < totalSlots) {
        vacantSlots++;
        totalExit++;
        printAvailableSlots();
        sendAvailableSlots(vacantSlots);
        sendNewUARTData(totalSlots, vacantSlots, totalEntry, totalExit);
        preferences.putInt("vacantSlots", vacantSlots);
        preferences.putInt("totalExit", totalExit);
        delay(1000);
      }
    }
  }

  // Check if data is available on UART
  if (uart.available()) {
    char command = uart.read();
    if (command == 'S') {
      char total_string[4];
      char vacant_string[4];
      uart.readBytes(total_string, 3);
      uart.readBytes(vacant_string, 3);
      total_string[3] = '\0';
      vacant_string[3] = '\0';
      int total = atoi(total_string);
      int vacant = atoi(vacant_string);
      if (total > 0 && vacant >= 0 && vacant <= total) {
        totalSlots = total;
        vacantSlots = vacant;
        preferences.putInt("totalSlots", totalSlots);
        preferences.putInt("vacantSlots", vacantSlots);
        Serial.println("Total Parking Slots set to: " + String(totalSlots));
        Serial.println("Available Parking Slots set to: " + String(vacantSlots));
        sendAvailableSlots(vacantSlots);
      }
    }
  }

  delay(10);  // Slightly longer delay to reduce CPU usage
}

# this is the latets file for using the micropython. i have written this due to the problem we have faced that after two to three days it cause issue. it stops counitng
from machine import Pin, UART, WDT
from time import sleep, ticks_ms
import esp32

# Configuration
entryLoopPin = 5  # Entry loop detector pin
exitLoopPin = 4   # Exit loop detector pin
debounceDelay = 50  # Debounce delay in milliseconds

# Initialize watchdog timer
wdt = WDT(timeout=30000)  # Set watchdog timeout to 30 seconds

nvs = esp32.NVS('storage')

# Helper function to read or initialize NVS variables
def nvs_get_or_init(key, default_value):
    try:
        value = nvs.get_i32(key)
        print(f"{key} retrieved from NVS:", value)
    except OSError:
        value = default_value
        nvs.set_i32(key, value)
        print(f"{key} initialized to default:", value)
    return value

totalSlots = nvs_get_or_init('totalSlots', 99)
vacantSlots = nvs_get_or_init('vacantSlots', totalSlots)
totalEntry = nvs_get_or_init('totalEntry', 0)
totalExit = nvs_get_or_init('totalExit', 0)

# Set up entry and exit loop detectors
entryLoop = Pin(entryLoopPin, Pin.IN, Pin.PULL_UP)
exitLoop = Pin(exitLoopPin, Pin.IN, Pin.PULL_UP)

# Initialize UARTs
uart = UART(2, baudrate=9600, tx=Pin(16), rx=Pin(17))
uart2 = UART(1, baudrate=9600, tx=Pin(33), rx=Pin(32))

# Function to send available slots to the display
def sendAvailableSlots(slots):
    slots_str = f'{slots:02d}'
    message = f'|C|1|4|1|28-0-#u{slots_str}|'
    print(f"Sending message: {message}")  # Debug print
    uart.write(message.encode('ascii'))  # Ensure the message is encoded as ASCII

def sendNewUARTData(totalSlots, vacantSlots, totalEntry, totalExit):
    data_array = [0xAA, totalSlots, vacantSlots, totalEntry, totalExit, 0xCC]
    uart2.write(bytearray(data_array))
    print(f"New UART Data Sent: {data_array}")

def printAvailableSlots():
    print("Available Parking Slots:", vacantSlots)

def printTotalSlots():
    print("Total Parking Slots:", totalSlots)

# Print initial available slots
printAvailableSlots()
printTotalSlots()
sendAvailableSlots(vacantSlots)

lastEntryTime = 0
lastExitTime = 0

# Main loop
while True:
    currentTime = ticks_ms()
    
    entryReading = entryLoop.value()
    exitReading = exitLoop.value()
    
    # Handle entry detection
    if entryReading == 0 and (currentTime - lastEntryTime >= debounceDelay):
        sleep(0.05)
        if entryLoop.value() == 0:
            lastEntryTime = currentTime
            if vacantSlots > 0:
                vacantSlots -= 1
                totalEntry += 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                sendNewUARTData(totalSlots, vacantSlots, totalEntry, totalExit)
                nvs.set_i32('vacantSlots', vacantSlots)
                nvs.set_i32('totalEntry', totalEntry)
                sleep(1)
    
    # Handle exit detection
    if exitReading == 0 and (currentTime - lastExitTime >= debounceDelay):
        sleep(0.05)
        if exitLoop.value() == 0:
            lastExitTime = currentTime
            if vacantSlots < totalSlots:
                vacantSlots += 1
                totalExit += 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                sendNewUARTData(totalSlots, vacantSlots, totalEntry, totalExit)
                nvs.set_i32('vacantSlots', vacantSlots)
                nvs.set_i32('totalExit', totalExit)
                sleep(1)
    
    # Check if data is available on UART
    if uart.any():
        command = uart.read(1)
        if command == b'S':
            total_string = uart.read(3)
            vacant_string = uart.read(3)
            try:
                total = int(total_string)
                vacant = int(vacant_string)
                if total > 0 and 0 <= vacant <= total:
                    totalSlots = total
                    vacantSlots = vacant
                    nvs.set_i32('totalSlots', totalSlots)
                    nvs.set_i32('vacantSlots', vacantSlots)
                    print("Total Parking Slots set to:", totalSlots)
                    print("Available Parking Slots set to:", vacantSlots)
                    sendAvailableSlots(vacantSlots)
            except ValueError:
                pass
    
    sleep(0.1)  # Slightly longer sleep to reduce CPU usage
    wdt.feed()  # Feed the watchdog to prevent a reset
