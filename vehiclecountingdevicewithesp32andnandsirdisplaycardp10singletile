#EXAMPLE-1 in this i am using the nand sir p10 RGB display for displaying the data.so i am integrate it with my VCD controller. so that it sends the data to this and it display the data 
#nand sir ke display me black is A and red is B and green is gnd. and in our esp32 i have connected red to A and green wire to B. so connection is simply black se red connect hai aur red se green connect hai
from machine import Pin, UART
from time import sleep, ticks_ms
import esp32

# Configuration
entryLoopPin = 5  # Entry loop detector pin
exitLoopPin = 4   # Exit loop detector pin
uart_tx_pin = 16
uart_rx_pin = 17
debounceDelay = 50  # Debounce delay in milliseconds

# Initialize NVS for storing the vacantSlots and totalParkingSlots values
nvs = esp32.NVS('storage')

# Try to get the 'totalParkingSlots' value from NVS, otherwise initialize it to a default value
try:
    totalSlots = nvs.get_i32('totalSlots')
    print("Total Parking Slots retrieved from NVS:", totalSlots)
except OSError:
    totalSlots = 99  # Default total parking slots
    nvs.set_i32('totalSlots', totalSlots)
    print("Total Parking Slots initialized to default:", totalSlots)

# Try to get the 'vacantSlots' value from NVS, otherwise initialize it to the total parking slots
try:
    vacantSlots = nvs.get_i32('vacantSlots')
    print("Vacant Parking Slots retrieved from NVS:", vacantSlots)
except OSError:
    vacantSlots = totalSlots
    nvs.set_i32('vacantSlots', vacantSlots)
    print("Vacant Parking Slots initialized to default:", vacantSlots)

# Set up entry and exit loop detectors
entryLoop = Pin(entryLoopPin, Pin.IN, Pin.PULL_UP)
exitLoop = Pin(exitLoopPin, Pin.IN, Pin.PULL_UP)

# Initialize UART
uart = UART(2, baudrate=9600, tx=uart_tx_pin, rx=uart_rx_pin)

def sendAvailableSlots(slots):
    # Ensure the slots value is always two digits
    slots_str = f'{slots:02d}'
    # Create the protocol message
    message = f'|C|1|4|1|28-0-#u{slots_str}|'
    print(f"Sending message: {message}")  # Debug print
    uart.write(message.encode('ascii'))  # Ensure the message is encoded as ASCII

def printAvailableSlots():
    print("Available Parking Slots:", vacantSlots)

def printTotalSlots():
    print("Total Parking Slots:", totalSlots)

# Print initial available slots
printAvailableSlots()
printTotalSlots()
sendAvailableSlots(vacantSlots)

lastEntryTime = 0
lastExitTime = 0

# Main loop
while True:
    currentTime = ticks_ms()
    
    entryReading = entryLoop.value()
    exitReading = exitLoop.value()
    
    # Handle entry detection
    if entryReading == 0 and (currentTime - lastEntryTime >= debounceDelay):
        # Debouncing: Ensure the reading is stable
        sleep(0.05)
        if entryLoop.value() == 0:
            lastEntryTime = currentTime
            if vacantSlots > 0:
                vacantSlots -= 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                nvs.set_i32('vacantSlots', vacantSlots)
                sleep(1)  # Delay to avoid rapid changes due to loop execution speed
    
    # Handle exit detection
    if exitReading == 0 and (currentTime - lastExitTime >= debounceDelay):
        # Debouncing: Ensure the reading is stable
        sleep(0.05)
        if exitLoop.value() == 0:
            lastExitTime = currentTime
            if vacantSlots < totalSlots:
                vacantSlots += 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                nvs.set_i32('vacantSlots', vacantSlots)
                sleep(1)  # Delay to avoid rapid changes due to loop execution speed
    
    # Check if data is available on UART
    if uart.any():
        command = uart.read(1)
        if command == b'S':
            # Expecting the format 'S<total_slots><vacant_slots>', e.g., 'S500400' it sends the ascii data
            total_string = uart.read(3)
            vacant_string = uart.read(3)
            try:
                total = int(total_string)
                vacant = int(vacant_string)
                if total > 0 and 0 <= vacant <= total:
                    totalSlots = total
                    vacantSlots = vacant
                    nvs.set_i32('totalSlots', totalSlots)
                    nvs.set_i32('vacantSlots', vacantSlots)
                    print("Total Parking Slots set to:", totalSlots)
                    print("Available Parking Slots set to:", vacantSlots)
                    sendAvailableSlots(totalSlots, vacantSlots)
            except ValueError:
                pass  # Ignore if conversion to integer fails
    
    sleep(0.01)  # Small delay to reduce CPU usage

'''
#EXAMPLE-2 this is not tested now. in this we have removed the arrow sign and display the three digit data.
from machine import Pin, UART
from time import sleep, ticks_ms
import esp32

# Configuration
entryLoopPin = 5  # Entry loop detector pin
exitLoopPin = 4   # Exit loop detector pin
uart_tx_pin = 16
uart_rx_pin = 17
debounceDelay = 50  # Debounce delay in milliseconds

# Initialize NVS for storing the vacantSlots and totalParkingSlots values
nvs = esp32.NVS('storage')

# Try to get the 'totalParkingSlots' value from NVS, otherwise initialize it to a default value
try:
    totalSlots = nvs.get_i32('totalSlots')
    print("Total Parking Slots retrieved from NVS:", totalSlots)
except OSError:
    totalSlots = 99  # Default total parking slots
    nvs.set_i32('totalSlots', totalSlots)
    print("Total Parking Slots initialized to default:", totalSlots)

# Try to get the 'vacantSlots' value from NVS, otherwise initialize it to the total parking slots
try:
    vacantSlots = nvs.get_i32('vacantSlots')
    print("Vacant Parking Slots retrieved from NVS:", vacantSlots)
except OSError:
    vacantSlots = totalSlots
    nvs.set_i32('vacantSlots', vacantSlots)
    print("Vacant Parking Slots initialized to default:", vacantSlots)

# Set up entry and exit loop detectors
entryLoop = Pin(entryLoopPin, Pin.IN, Pin.PULL_UP)
exitLoop = Pin(exitLoopPin, Pin.IN, Pin.PULL_UP)

# Initialize UART
uart = UART(2, baudrate=9600, tx=uart_tx_pin, rx=uart_rx_pin)

def sendAvailableSlots(slots):
    # Ensure the slots value is always two digits
    slots_str = f'{slots:002d}'
    # Create the protocol message
    message = f'|C|1|4|1|20-0-#u{slots_str}|'
    print(f"Sending message: {message}")  # Debug print
    uart.write(message.encode('ascii'))  # Ensure the message is encoded as ASCII

def printAvailableSlots():
    print("Available Parking Slots:", vacantSlots)

def printTotalSlots():
    print("Total Parking Slots:", totalSlots)

# Print initial available slots
printAvailableSlots()
printTotalSlots()
sendAvailableSlots(vacantSlots)

lastEntryTime = 0
lastExitTime = 0

# Main loop
while True:
    currentTime = ticks_ms()
    
    entryReading = entryLoop.value()
    exitReading = exitLoop.value()
    
    # Handle entry detection
    if entryReading == 0 and (currentTime - lastEntryTime >= debounceDelay):
        # Debouncing: Ensure the reading is stable
        sleep(0.05)
        if entryLoop.value() == 0:
            lastEntryTime = currentTime
            if vacantSlots > 0:
                vacantSlots -= 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                nvs.set_i32('vacantSlots', vacantSlots)
                sleep(1)  # Delay to avoid rapid changes due to loop execution speed
    
    # Handle exit detection
    if exitReading == 0 and (currentTime - lastExitTime >= debounceDelay):
        # Debouncing: Ensure the reading is stable
        sleep(0.05)
        if exitLoop.value() == 0:
            lastExitTime = currentTime
            if vacantSlots < totalSlots:
                vacantSlots += 1
                printAvailableSlots()
                sendAvailableSlots(vacantSlots)
                nvs.set_i32('vacantSlots', vacantSlots)
                sleep(1)  # Delay to avoid rapid changes due to loop execution speed
    
    # Check if data is available on UART
    if uart.any():
        command = uart.read(1)
        if command == b'S':
            # Expecting the format 'S<total_slots><vacant_slots>', e.g., 'S500400' it sends the ascii data
            total_string = uart.read(3)
            vacant_string = uart.read(3)
            try:
                total = int(total_string)
                vacant = int(vacant_string)
                if total > 0 and 0 <= vacant <= total:
                    totalSlots = total
                    vacantSlots = vacant
                    nvs.set_i32('totalSlots', totalSlots)
                    nvs.set_i32('vacantSlots', vacantSlots)
                    print("Total Parking Slots set to:", totalSlots)
                    print("Available Parking Slots set to:", vacantSlots)
                    sendAvailableSlots(totalSlots, vacantSlots)
            except ValueError:
                pass  # Ignore if conversion to integer fails
    
    sleep(0.01)  # Small delay to reduce CPU usage

'''
